- title: "Verify all application software is current"
  check_command: |
    LASTUPDATE=$(sudo defaults read /Library/Preferences/com.apple.SoftwareUpdate | grep LastSuccessfulDate | sed -e 's@^.* "\([0-9\\-]*\) .*$@\1@'); if [ "$LASTUPDATE" = "$(date +%Y-%m-%d)" ];then exit 0; fi; exit 1
  enabled: true

- title: "Enable Auto Update"
  check_command: |
    sudo softwareupdate --schedule | grep 'Automatic check is on'
  enabled: true

- title: "Disable Bluetooth"
  check_command: |
    defaults read /Library/Preferences/com.apple.Bluetooth ControllerPowerState | grep 0
  enabled: true

- title: "Disable infrared receiver"
  check_command: |
    defaults read /Library/Preferences/com.apple.driver.AppleIRController DeviceEnabled | grep 0
  enabled: true

- title: "Disable AirDrop"
  check_command: |
    sudo defaults read com.apple.NetworkBrowser DisableAirDrop | grep 1
  enabled: true

- title: "Disable automatic setting of time and date"
  check_command: |
    sudo systemsetup getusingnetworktime | grep 'Network Time: Off'
  enabled: true

- title: "Set an inactivity interval of 10 minutes or less for the screen saver"
  check_command: |
    UUID=`ioreg -rd1 -c IOPlatformExpertDevice | grep "IOPlatformUUID" | sed -e 's/^.*"\(.*\)"$/\1/'`; for i in $(find /Users -type d -maxdepth 1); do PREF=$i/Library/Preferences/ByHost/com.apple.screensaver.$UUID; if [ -e $PREF.plist ]; then TIMEOUT=$(defaults read $PREF.plist idleTime) && if [ $TIMEOUT -eq 0 ] || [ $TIMEOUT -gt 600 ]; then exit 1; fi; fi; done; exit 0
  comment: "This checks the screensaver setting for each user"
  enabled: true

- title: "Enable secure screen saver corners"
  check_command: |
    for i in $(find /Users -type d -maxdepth 1); do PREF=$i/Library/Preferences/com.apple.dock.plist; if [ -e $PREF ]; then CORNER=$(defaults read $PREF | grep corner | grep 6) && if [ -n "$CORNER" ]; then exit 1; fi; fi; done; exit 0
  enabled: true

- title: "Require a password to wake the computer from sleep or screen saver"
  check_command: |
    defaults read com.apple.screensaver askForPassword | grep 1
  enabled: true

- title: "Ensure screen locks immediately when requested"
  check_command: |
    defaults read com.apple.screensaver askForPasswordDelay | grep "0"
  enabled: true

- title: "Disable Remote Apple Events"
  check_command: |
    sudo systemsetup -getremoteappleevents | grep "Remote Apple Events: Off"
  enabled: true

- title: "Disable Remote Login"
  check_command: |
    sudo systemsetup -getremotelogin | grep "Remote Login: Off"
  enabled: true

- title: "Disable Internet Sharing"
  check_command: |
    if [ -e /Library/Preferences/SystemConfiguration/com.apple.nat ]; then NAT=$(defaults read /Library/Preferences/SystemConfiguration/com.apple.nat | grep -i "Enabled = 0") && if [ -n "$NAT" ]; then exit 1; fi; fi; exit 0
  enabled: true

- title: "Disable Screen Sharing"
  check_command: |
    if [ -e /System/Library/LaunchDaemons/com.apple.screensharing.plist ]; then STATUS=$(launchctl load /System/Library/LaunchDaemons/com.apple.screensharing.plist | grep -v "Service is disabled") && if [ -n "$STATUS" ]; then exit 1; fi; fi; exit 0
  enabled: true

- title: "Disable Printer Sharing"
  check_command: |
    if [ -n "$(system_profiler SPPrintersDataType | grep Shared | grep Yes)" ]; then exit 1; fi; exit 0
  enabled: true

- title: "Disable Wake on Network Access"
  check_command: |
    sudo systemsetup getwakeonnetworkaccess | grep "Wake On Network Access: Off"
  enabled: true

- title: "Disable File Sharing"
  check_command: |
    if [ -n "$(launchctl list | egrep AppleFileServer)" ]; then exit 1; fi; if [ -n "$(grep -i array /Library/Preferences/SystemConfiguration/com.apple.smb.server.plist)" ]; then exit 1; fi; exit 0;
  enabled: true

- title: "Disable Remote Management"
  check_command: |
    if [ -n "$(ps -ef | egrep "/System/Library/CoreServices/RemoteManagement/ARDAgent.app/Contents/MacOS/[A]RDAgent")" ]; then exit 1; fi; exit 0
  enabled: true

- title: "Enable FileVault"
  check_command: |
    diskutil cs list | grep -i "Encryption Status:       Unlocked"
  enabled: true

- title: "Destroy File Vault Key when going to standby"
  check_command: |
    pmset -g | grep DestroyFVKeyOnStandby | grep 1
  enabled: true

- title: "Enable hibernation mode (no memory power on sleep)"
  check_command: |
    pmset -g | grep hibernatemode | grep 25
  enabled: true

- title: "Enable Gatekeeper"
  check_command: |
    spctl --status | grep "assessments enabled"
  enabled: true

- title: "Enable Firewall"
  check_command: |
    test $(defaults read /Library/Preferences/com.apple.alf globalstate) -ge 1
  enabled: true

- title: "Enable Firewall Stealth Mode"
  check_command: |
    /usr/libexec/ApplicationFirewall/socketfilterfw --getstealthmode | grep "Stealth mode enabled"
  enabled: true

- title: "Disable signed apps from being auto-permitted to listen through firewall"
  check_command: |
    defaults read /Library/Preferences/com.apple.alf allowsignedenabled | grep 0
  enabled: true

- title: "Disable iCloud drive"
  check_command: |
    if [ -n "$(defaults read NSGlobalDomain NSDocumentSaveNewDocumentsToCloud | grep "0")" ]; then exit 0; fi; exit 1;
  enabled: true

- title: "Require an administrator password to access system-wide preferences"
  check_command: |
    if [ -n "$(security authorizationdb read system.preferences 2> /dev/null | grep -A1 shared | grep -E '(true|false)' | grep 'false')" ]; then exit 0; fi; exit 1
  enabled: true

- title: "Disable IPv6"
  check_command: |
    networksetup -listallnetworkservices | while read i; do SUPPORT=$(networksetup -getinfo "$i" | grep "IPv6: Automatic") && if [ -n "$SUPPORT" ]; then exit 1; fi; done; exit 0
  enabled: true

- title: "Disable Previews"
  check_command: |
    defaults read /Library/Preferences/com.apple.finder.plist | grep ShowIconThumbnails | grep 0
  enabled: true

- title: "Secure Safari by crippling it"
  check_command: |
    defaults read com.apple.Safari WebKitOmitPDFSupport | grep 1
  enabled: true

- title: "Disable automatic loading of remote content by Mail.app"
  check_command: |
    defaults read com.apple.mail-shared DisableURLLoading | grep 1
  enabled: true

- title: "Disable Captive Portal"
  check_command: |
    defaults read /Library/Preferences/SystemConfiguration/com.apple.captive.control.plist | grep "Active = 0"
  enabled: true

- title: "Enable logging"
  check_command: |
    defaults read /Library/Preferences/com.apple.alf loggingenabled | grep 1
  enabled: true

- title: "Verify no HTTP update URLs for Sparkle Updater"
  check_command: |
    for i in /Applications/*/Contents/Info.plist; do URL=$(defaults read "$i" SUFeedURL 2>/dev/null | grep "http://"); if [ -n "$URL" ]; then exit 1; fi; done; exit 0
  enabled: true